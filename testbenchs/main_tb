----------------------------------------------------------------------------------
-- Author:          Jules CONTADIN 
-- 
-- Create Date:     18.07.2024 10:21
-- Module Name:     main_tb - Behavioral
-- Target Devices:  MachXO3LF-9400C
-- Description: 
--		Testbench for main, using the file arr_4_main_tb.txt
-------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use STD.TEXTIO.ALL;

entity main_tb is
end main_tb;

architecture Behavioral of main_tb is
	-- Component UUT
	component main is 
	generic(
		constant DATA_BITS:		integer := 32;
		constant PULSE_WIDTH:	integer := 2;
		constant FREQ_FPGA:		integer := 400
        );
    Port(
        spi_clk_i:		in std_logic;
		pll_clki:		in std_logic;
		reset_n_i:		in std_logic;
		spi_mosi_i:		in std_logic;
		spi_cs_i:		in std_logic;
		step_o:			out std_logic
        );
	end component;

	-- Generics definitions
	constant DATA_BITS:			integer := 32;	-- in bits
	constant PULSE_WIDTH:		integer := 2;	-- in us
	constant FREQ_FPGA:			integer := 400;	-- in MHz
	-- Clock period definitions
	constant CLKI_CLK_PERIOD:	time := 125 ns;	-- Internal clock peridoe (8MHz)
	constant SPI_CLK_PERIOD:	time := 83 ns;	-- SPI clock periode (12 MHz)
	-- Inputs
	signal spi_clk_i:	std_logic := '0';
	signal pll_clki:	std_logic := '0';
	signal reset_n_i:	std_logic := '1';
	signal spi_mosi_i:	std_logic := '0';
	signal spi_cs_i:	std_logic := '1';
	-- Outputs
	signal step_o: 		std_logic;
	-- File
	file fptr: text;
	
	-- Function to send an SPI frame
	procedure send_spi_frame(
		constant data_frame : in std_logic_vector(DATA_BITS-1 downto 0);
		signal mosi:	out std_logic;
		signal clk:		out std_logic
	) is
	begin
		for i in DATA_BITS-1 downto 0 loop
			clk <= '0';
			mosi <= data_frame(i);
			wait for SPI_CLK_PERIOD/2;
			clk <= '1';
			wait for SPI_CLK_PERIOD/2;
		end loop;
		clk <= '0';
		mosi <= '0';
	end procedure;  
	
begin
	-- Unit Under Test
	uut : main
		generic map (
			DATA_BITS => DATA_BITS,
			PULSE_WIDTH => PULSE_WIDTH,
			FREQ_FPGA => FREQ_FPGA
		)
		port map (
			spi_clk_i => spi_clk_i,
			pll_clki => pll_clki,
			reset_n_i => reset_n_i,
			spi_mosi_i => spi_mosi_i,
			spi_cs_i => spi_cs_i,
			step_o => step_o
		);
	
	-- Internal clock process (8 MHz) 
	pll_input_clk_process: process
	begin
		pll_clki <= '0';
		wait for CLKI_CLK_PERIOD / 2;
		pll_clki <= '1';
		wait for CLKI_CLK_PERIOD / 2;
	end process;

	-- Stimulus process
	read_file_process: process
		variable fstatus:			file_open_status;
		
		variable file_line:			line;
		variable var_file_data:		integer;
		variable var_true_input:	integer;
	
	begin
		-- Reset & init variable
		var_file_data := 0;
		var_true_input := 0;
		
		reset_n_i <= '0';
		wait for 814 ns;	-- PLL Init time
		reset_n_i <= '1';
		
		
		-- Open file
		file_open(fstatus, fptr, "arr_4_main_tb.txt", read_mode);
		-- Extract file values and use them as SPI input
		spi_cs_i <= '0';	-- BEgin burst mode
		while (not endfile(fptr)) loop
			readline(fptr, file_line);		-- Read each line from the file
			read(file_line, var_file_data);	-- Convert the line to a STD_LOGIC_VECTOR
			
			if var_file_data = 1 then	-- Skip conversion calcul if input is 1		
				var_true_input := var_file_data;
			else						-- Convert ARR values from file(that are for a 275MHz processor) to our 400MHz speed
				var_true_input := var_file_data*FREQ_FPGA/275;	-- 275MHz: Freq of file
			end if;
			
			--spi_cs_i <= '0';	-- Without burst mode
			send_spi_frame(conv_std_logic_vector(var_true_input, 32), spi_mosi_i, spi_clk_i);	-- ARR frame
			--spi_cs_i <= '1';
			wait for 1 ms;
		end loop;
		spi_cs_i <= '1';	-- End burst mode
		wait for SPI_CLK_PERIOD;
		file_close(fptr);
		wait;
	end process;
end Behavioral;
